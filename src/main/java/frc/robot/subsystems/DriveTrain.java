// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.motorcontrol.MotorController;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
import edu.wpi.first.wpilibj.motorcontrol.PWMVictorSPX;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private AnalogGyro gyro;
private Encoder leftEncoder;
private Encoder rightEncoder;
private PWMVictorSPX leftLeadMotorController;
private PWMVictorSPX leftFollowMotorController;
private MotorControllerGroup leftMotorControllerGroup;
private PWMVictorSPX rightLeadMotorController;
private PWMVictorSPX rightFollowMotorController;
private MotorControllerGroup rightMotorControllerGroup;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
gyro = new AnalogGyro(0);
 addChild("Gyro",gyro);
 gyro.setSensitivity(0.007);

leftEncoder = new Encoder(0, 1, false, EncodingType.k4X);
 addChild("Left Encoder",leftEncoder);
 leftEncoder.setDistancePerPulse(1.0);

rightEncoder = new Encoder(2, 3, true, EncodingType.k4X);
 addChild("Right Encoder",rightEncoder);
 rightEncoder.setDistancePerPulse(1.0);

leftLeadMotorController = new PWMVictorSPX(0);
 addChild("Left Lead Motor Controller",leftLeadMotorController);
 leftLeadMotorController.setInverted(false);

leftFollowMotorController = new PWMVictorSPX(1);
 addChild("Left Follow Motor Controller",leftFollowMotorController);
 leftFollowMotorController.setInverted(false);

leftMotorControllerGroup = new MotorControllerGroup(leftLeadMotorController, leftFollowMotorController  );
 addChild("Left Motor Controller Group",leftMotorControllerGroup);
 

rightLeadMotorController = new PWMVictorSPX(2);
 addChild("Right Lead Motor Controller",rightLeadMotorController);
 rightLeadMotorController.setInverted(false);

rightFollowMotorController = new PWMVictorSPX(3);
 addChild("Right Follow Motor Controller",rightFollowMotorController);
 rightFollowMotorController.setInverted(false);

rightMotorControllerGroup = new MotorControllerGroup(rightLeadMotorController, rightFollowMotorController  );
 addChild("Right Motor Controller Group",rightMotorControllerGroup);
 


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

