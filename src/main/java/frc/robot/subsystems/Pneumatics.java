// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.PneumaticsModuleType;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Pneumatics extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private Compressor compressor;
private DoubleSolenoid doubleSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public boolean manipulator_open = false;
    public Pneumatics() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
compressor = new Compressor(0, PneumaticsModuleType.CTREPCM);
 addChild("Compressor",compressor);
 

doubleSolenoid = new DoubleSolenoid(0, PneumaticsModuleType.CTREPCM, 2, 1);
 addChild("Double Solenoid", doubleSolenoid);
 


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        SmartDashboard.putNumber("Pressure", getPressure());
    }

    // @Override
    // public void simulationPeriodic() {
    //     // This method will be called once per scheduler run when in simulation

    // }

    public double getPressure() {
        return compressor.getPressure();
    }

    public void setDoubleOFF() {
        doubleSolenoid.set(DoubleSolenoid.Value.kOff);
    }
    public void setDoubleForward() {
        manipulator_open = true;
        doubleSolenoid.set(DoubleSolenoid.Value.kForward);
    }
    public void setDoubleReverse() {
        manipulator_open = false;
        doubleSolenoid.set(DoubleSolenoid.Value.kReverse);
    }
}

